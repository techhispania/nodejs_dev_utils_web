<div class="container mt-4">
    
    <a href="/" class="mt-3 mb-3 btn btn-primary" id="back-btn"><i class="bi bi-arrow-left"></i> Back</a>

    <h3>Save new appliation credentials</h3>
    <form id="inputIpForm">
        <div class="mb-3">
            <label for="application_input" class="form-label">Application name:</label>
            <input class="form-control" id="application_input" type="text" placeholder='Enter application name'>
        </div>

        <div class="mb-3">
            <label for="user_input" class="form-label">Username:</label>
            <input class="form-control" id="user_input" type="text" placeholder='Enter username'>
        </div>

        <div class="mb-3">
            <label for="password_input" class="form-label">Password:</label>
            <input class="form-control" id="password_input" type="password" placeholder='Enter password'>
        </div>

        <button type="button" class="btn btn-primary" id="save_btn">Save</button>
    </form>
</div>
<div class="container mt-4">
    <h3>Credentials list</h3>

    {{#if credentials.length}}
    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <th>Application</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        {{#each credentials}}
        <tr>
            <td>{{this.application_name}}</td>
            <td class="text-center">
                <button data-id="{{this._id}}" class="btn btn-primary btn-show-credentials">
                    <i class="bi bi-eye"></i> Show
                </button>
                <button data-id="{{this._id}}" class="btn btn-primary btn-edit-credentials">
                    <i class="bi bi-pencil"></i> Edit
                </button>
                <button data-id="{{this._id}}" class="btn btn-primary btn-delete-credentials">
                    <i class="bi bi-trash"></i> Remove
                </button>
            </td>
        </tr>
        {{/each}}
        </tbody>
    </table>
    {{else}}
        <div class="alert alert-info">No credentials found</div>
    {{/if}}
</div>

<!-- Alert where credentials are showed -->
<div class="modal fade" id="credentialsModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Credentials</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p><strong>Username:</strong> <span id="modal-username"></span></p>
        <p><strong>Password:</strong> <span id="modal-password"></span></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Alert where credentials can be edited -->
<div class="modal fade" id="editCredentialsModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Credentials</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p><strong>Application:</strong> <input class="form-control" id="edit-application_input" type="text" placeholder='Enter application name'></p>
        <p><strong>Username:</strong> <input class="form-control" id="edit-user_input" type="text" placeholder='Enter username'></p>
        <p><strong>Password:</strong> <input class="form-control" id="edit-password_input" type="password" placeholder='Enter password'></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="edit-btn">Edit</button>
      </div>
    </div>
  </div>
</div>

<script>
    const save_btn = document.getElementById("save_btn")
    const application_input = document.getElementById("application_input")
    const user_input = document.getElementById("user_input")
    const password_input = document.getElementById("password_input")

    save_btn.addEventListener("click", async() => {
        console.log("Request to server to store the new credential")
        try {
            const response = await fetch("/api/credentials", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify({application_name: application_input.value.trim(),
                                    username: user_input.value.trim(),
                                    password: password_input.value.trim()})
            })
            console.log("Request done")
            if (!response.ok) {
                throw new Error(`Error storing the credentials for application ${application_input.value.trim()}. Response: ${JSON.stringify(response)}`)
            }

            const data = await response.json()

            application_input.value = ""
            user_input.value = ""
            password_input.value = ""

            window.location.reload()
        } catch (error) {
            console.error(`Error storing credentials: ${error}`)
            alert("There was a problem storing the credentials")
        }
    })

    document.querySelectorAll(".btn-show-credentials").forEach(btn => {
        btn.addEventListener("click", async () => {
            const id = btn.dataset.id;
            console.log(`Show credentials for id: ${id}`);

            try {
                const response = await fetch(`/api/credentials/${id}`, {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                })
                console.log("Request done")
                if (!response.ok) {
                    throw new Error(`Error getting the credentials for id ${id}. Response: ${JSON.stringify(response)}`)
                }

                const data = await response.json()

                show_credentials_alert(data.username, data.password)
            } catch (error) {
                console.error(`Error getting credentials: ${error}`)
                alert("There was a problem getting the credentials")
            }
        });
    });


    document.querySelectorAll(".btn-edit-credentials").forEach(btn => {
        btn.addEventListener("click", async () => {
            const id = btn.dataset.id;
            console.log(`Edit credentials for id: ${id}`);

            try {
                const response = await fetch(`/api/credentials/${id}`, {
                    method: "GET",
                    headers: {
                        "Accept": "application/json"
                    }
                })
                console.log("Request done")
                if (!response.ok) {
                    throw new Error(`Error getting the credentials for id ${id}. Response: ${JSON.stringify(response)}`)
                }

                const data = await response.json()

                show_edit_credentials_alert(id, data.application, data.username, data.password)
            } catch (error) {
                console.error(`Error getting credentials: ${error}`)
                alert("There was a problem getting the credentials")
            }
        });
    });


    document.querySelectorAll(".btn-delete-credentials").forEach(btn => {
        btn.addEventListener("click", async () => {
            const id = btn.dataset.id;
            console.log(`Delete credential with id: ${id}`);

            if (confirm(`Are you sure you want to delete the credential?`)) {
                console.log(`Proceed to delete credential with id ${id}`)
                await delete_credential(id)
                window.location.reload()
            } else {
                console.log(`Delete action cancelled`)
            }
        });
    });

    function show_credentials_alert(username, password) {
        document.getElementById("modal-username").textContent = username;
        document.getElementById("modal-password").textContent = password;

        const modalEl = document.getElementById("credentialsModal");
        const modal = new bootstrap.Modal(modalEl);
        modal.show();

        setTimeout(() => {
            modal.hide();
        }, 30000);
    }

    function show_edit_credentials_alert(id, application, username, password) {
        document.getElementById("edit-application_input").value = application
        document.getElementById("edit-user_input").value = username
        document.getElementById("edit-password_input").value = password

        const modalEl = document.getElementById("editCredentialsModal");
        const modal = new bootstrap.Modal(modalEl);
        modal.show();

        const edit_btn = document.getElementById("edit-btn")

        edit_btn.addEventListener("click", async () => {
            const new_application = document.getElementById("edit-application_input").value
            const new_username = document.getElementById("edit-user_input").value
            const new_password = document.getElementById("edit-password_input").value

            console.log(`Proceed to edit credential '${id}'`)
            await edit_credential(id, new_application, new_username, new_password)
            window.location.reload()
        });
    }

    async function edit_credential(id, new_application, new_username, new_password) {
        try {
            const response = await fetch(`/api/credentials/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify({application_name: new_application.trim(),
                                    username: new_username.trim(),
                                    password: new_password.trim()})
            })
            console.log("Request done")
            if (!response.ok) {
                throw new Error(`Error editing the credential for application ${id}. Response: ${JSON.stringify(response)}`)
            }

            const data = await response.json()

            window.location.reload()
        } catch (error) {
            console.error(`Error editing credentials: ${error}`)
            alert("There was a problem editing the credentials")
        }
    }

    async function delete_credential(id) {
        try {
            const response = await fetch(`/api/credentials/${id}`, {
                method: "DELETE",
                headers: {
                    "Accept": "application/json"
                }
            })
            console.log("Request done")
            if (!response.ok) {
                throw new Error(`Error deleting the credentials for id ${id}. Response: ${JSON.stringify(response)}`)
            }

            const data = await response.json()

        } catch (error) {
            console.error(`Error getting credentials: ${error}`)
            alert("There was a problem getting the credentials")
        }
    }
</script>